<?xml version="1.0"?>
<!--
                  Welcome to the Portico Build System

       The Portico build system is an artefact-driven, modular, Ant
       based system. The base framework is split up over a number of
       different build files (base structure, macros, etc...) and is
       designed to be extended rather than modified. The full system
       is introduced and described in the online documentation.
       
                              *** NOTE ***                        
       Do not edit this file except to add new profiles. This system
       is designed to be extended rather than modified directly.
-->
<project name="portico" default="sandbox">

	<!-- =========================================================== -->
	<!--                      General Settings                       -->
	<!-- =========================================================== -->
	<description>
        Open source, extensible HLA Run Time Infrastructure implementation.
	</description>

	<!-- =========================================================== -->
	<!--               System Properties and Utilities               -->
	<!-- =========================================================== -->
	<import file="profiles/system.properties.xml"/>    <!-- standard set of common properties -->
	<import file="profiles/system.libraries.xml"/>     <!-- standard set of common libraries -->
	<import file="profiles/system.macros.xml"/>        <!-- standard set of common macros -->

	<!-- =========================================================== -->
	<!--                       Master Targets                        -->
	<!-- =========================================================== -->
	<target name="clean"
	        description="Removes all generated build artefacts"
	        depends="master.clean,common.clean"/>
	
	<target name="compile"
	        description="Compile all the production code"
	        depends="master.compile"/>

	<target name="test"
	        description="Compile and run the automated test suite"
	        depends="master.test"/>

	<target name="sandbox"
	        description="Create a sandbox environment to test and validate in"
	        depends="master.sandbox"/>

	<target name="installer"
	        description="Create an installer package from the sandbox"
	        depends="master.installer"/>

	<target name="release"
	        description="Clean, run all test sand generate a standard release package"
	        depends="clean,build.release,master.release,installer,java.sandbox.jre"/>

	<target name="release.thin"
	        description="Generate a standard release package, but skip the tests"
	        depends="clean,build.release,sandbox,installer,java.sandbox.jre"/>
	
	<target name="32.installer"
	        description="Create a 32 bit installer from the sandbox"
	        depends="master.32.installer"/>
	
	<!-- =========================================================== -->
	<!--                      Extension Points                       -->
	<!-- =========================================================== -->
	<!-- These extension points are defined for the various profile targets
	     to hook onto, thus allowing them to identify themselves as targets
	     that should be run as part of a particular global action.
	     
	     This means that when we run "compile", any imported targets that
	     are declared as an extensionOf "master.compile" will be executed.
	     
	     An extension point for each major build action is defined.
	-->
	<extension-point name="master.clean"/>
	<extension-point name="master.compile"/>
	<extension-point name="master.test"/>
	<extension-point name="master.sandbox"/>
	<extension-point name="master.installer"/>
	<extension-point name="master.release"/>
	<extension-point name="master.32.installer"/>

	<!-- =========================================================== -->
	<!--                        Build Profiles                       -->
	<!-- =========================================================== -->
	<!-- Platform neutral java build -->
	<import file="profiles/java.xml"/>
	<!-- Parent C++ build scaffolding to attach to -->
	<import file="profiles/cpp.xml"/>

	<!-- =========================================================== -->
	<!--               Platform Dependent Build Profiles             -->
	<!-- =========================================================== -->

	<!-- Mac OS X C++ and Installer profiles -->
	<import file="profiles/macosx/hla13.xml"        if="platform.macosx"/>
	<import file="profiles/macosx/test13.xml"       if="platform.macosx"/>
	<import file="profiles/macosx/ieee1516e.xml"    if="platform.macosx"/>
	<import file="profiles/macosx/installer.xml"    if="platform.macosx"/>


	<!-- Linux C++ and Installer profiles -->
	<import file="profiles/linux/hla13.xml"         as="cpp.hla13"      if="platform.linux64"/>
	<import file="profiles/linux/ieee1516e.xml"     as="cpp.iee1516e"   if="platform.linux64"/>
	<import file="profiles/linux/installer.xml"     as="installer"      if="platform.linux64"/>


	<!-- Windows C++ and Installer profiles -->
	<import file="profiles/windows/hla13.xml"       if="platform.windows"/>
	<import file="profiles/windows/ieee1516e.xml"   if="platform.windows"/>
	<import file="profiles/windows/installer.xml"   if="platform.windows"/>

	<!-- Deployment Tasks -->
	<!--<include file="profiles/deploy.xml"              as="deploy"/>-->

	<!-- =========================================================== -->
	<!--      Private Internal Targets. Do not modify or extend.     -->
	<!-- =========================================================== -->
	<target name="common.clean">
		<!-- Remove any top-level directories that might need to go -->
		<delete dir="${build.dir}"/>
		<delete dir="${dist.dir}"/>
	</target>

	<!-- ============================================================ -->
	<!--  Extension Targets - Variations and extenions on public ones -->
	<!-- ============================================================ -->
	<!-- Set the flag that says this is a release build. Usually used to control
	     whether we execute time-intensive tasks that aren't necessary for testing
	     such as the generation of API docs, etc... -->
	<target name="build.release">
		<echo>Build flagged as a release build. Setting build.release property to true</echo>
		<property name="build.release" value="true"/>
	</target>

</project>

<?xml version="1.0"?>
<!--
                  Welcome to the Portico Build System

       The Portico build system is an artefact-driven, modular, Ant
       based system. The base framework is split up over a number of
       different build files (base structure, macros, etc...) and is
       designed to be extended rather than modified. The full system
       is introduced and described in the online documentation:
       
       http://porticoproject.org/index.php?title=Building_Portico
-->
<project name="ieee1516e">

	<!-- ================================================================================= -->
	<!--                                 General Settings                                  -->
	<!-- ================================================================================= -->
	<description>
		Linux C++ build profile for IEEE-1516 (2010) Interface [HLA Evolved]
	</description>

	<!-- ==== Basic Properties ==== -->
	<!-- Verify that we have an appropriate JDK to build against -->
	<verifyJdk location="${jdk.home.linux64}" arch="amd64" requiredVersion="${java.compiler.target}"/>

	<!-- ================================================ -->
	<!-- ==== IEEE-1516e (2010) Interface Properties ==== -->
	<!-- ================================================ -->
	<!-- source -->
	<property name="ieee1516e.src.dir"         location="${cpp.src.dir}/ieee1516e/src"/>
	<property name="ieee1516e.include.dir"     location="${cpp.src.dir}/ieee1516e/include"/>
	<property name="ieee1516e.example.dir"     location="${cpp.src.dir}/ieee1516e/example"/>
	
	<!-- build -->
	<property name="ieee1516e.build.dir"       location="${build.dir}/cpp/linux64/ieee1516e"/>
	<property name="ieee1516e.complete.dir"    location="${ieee1516e.build.dir}/complete"/>

	<!-- =========================================================== -->
	<!--                     Project Libraries                       -->
	<!-- =========================================================== -->
	<!-- ==== Library Path Definitions ==== -->
	<!-- See profiles/project.libraries.xml -->
	<property name="cppunit.dir"     location="${lib.dir}/cppunit/cppunit-1.15"/> 
	<property name="cppunit.include" location="${cppunit.dir}/include"/> 
	<property name="cppunit.lib"     location="${cppunit.dir}/linux64"/> 

	<!-- ================================================================================= -->
	<!--                                   Clean Targets                                   -->
	<!-- ================================================================================= -->
	<target name="clean" extensionOf="cpp.clean">
		<delete dir="${ieee1516e.build.dir}"/>
	</target>

	<!-- ================================================================================= -->
	<!--                                  Compile Targets                                  -->
	<!-- ================================================================================= -->
	<!-- ==================================== -->
	<!--       Main IEEE-1516e Interface      -->
	<!-- ==================================== -->
	<target name="compile">
		<compile-ieee1516e arch="amd64" build="debug"/>
		<compile-ieee1516e arch="amd64" build="release"/>
	</target>

	<!-- ==================================== -->
	<!--          1516e Test Suite          -->
	<!-- ==================================== -->
	<target name="test.compile" depends="compile" if="_not-implemented-yet">
		<cpptask compiler="g++"
		         outfile="testieee1516e"
		         workdir="${testieee1516e.build.dir}"
		         outdir="${testieee1516e.complete.dir}"
		         type="executable"
		         arch="amd64"
		         compilerArgs="-std=c++14 -g -O0 -fPIC -Wall -Wno-deprecated -Wno-write-strings"
		         linkerArgs="-Wl,-rpath-link ${jdk.home.linux64}/lib/server">
			<fileset dir="${ieee1516e.test.src.dir}" includes="**/*.cpp"/>
			<includepath path="${ieee1516e.include.dir}"/>
			<includepath path="${ieee1516e.src.dir}/hla/time"/>
			<includepath path="${cppunit.include}"/>
			<define name="RTI_USES_STD_FSTREAM"/>
			<define name="DEBUG"/>
			<library path="${ieee1516e.complete.dir}/gcc4" libs="rti1516e64d,fedtime1516e64d"/>
			<library path="${cppunit.lib}" libs="cppunit"/>
		</cpptask>
	</target>

	<!-- ==================================== -->
	<!--        1516e Example Federate        -->
	<!-- ==================================== -->
	<!-- Compiles the 1516e example federate. Doesn't do much except
	     assure that we can actually compile and link it to Portico -->
	<target name="example.compile" depends="compile">
		<condition property="jvm" value="${jdk.home.linux64}/jre/lib/amd64/server" else="${jdk.home.linux64}/lib/server">
			<contains substring="${java.compiler.target}" string="1.7,1.8"/>
		</condition>
		<cpptask compiler="g++"
				 outfile="ieee1516e-example"
		         workdir="${ieee1516e.build.dir}/ieee1516e-example"
		         type="executable"
		         arch="amd64"
		         compilerArgs="-std=c++14 -g -O1 -fPIC -Wall -Wno-deprecated -Wno-write-strings"
		         linkerArgs="-Wl,-rpath-link ${jdk.home.linux64}/lib/server">
			<fileset dir="${ieee1516e.example.dir}" includes="**/*.cpp"/>
			<includepath path="${ieee1516e.include.dir}"/>
			<includepath path="${jdk.home.linux64}/include;${jdk.home.linux64}/include/linux"/>
			<define name="RTI_USES_STD_FSTREAM"/>
			<define name="RTI_DISABLE_WARNINGS"/>
			<define name="DEBUG"/>
			<library path="${ieee1516e.complete.dir}/gcc11" libs="rti1516e64d"/>
			<library path="${jvm}" libs="jvm,jsig"/>
		</cpptask>
	</target>

	<!-- ================================================================================= -->
	<!--                                  Testing Targets                                  -->
	<!-- ================================================================================= -->

	<!-- Not implemented for C++ IEEE-1516e Inteface -->
	<target name="test" extensionOf="cpp.test" depends="example.compile">
		<echo>No unit test suite for the IEEE-1516e Interface</echo>
	</target>

	<!-- ================================================================================= -->
	<!--                                  Sandbox Targets                                  -->
	<!-- ================================================================================= -->
	<!-- 
	     The main sandbox preparation target. This will aggregate together all the various
	     required artefacts scattered around the build environment into the structure that
	     should be present when installed on a users system (relative to the sandbox dir).
	-->
	<target name="sandbox" extensionOf="cpp.sandbox" depends="java.sandbox,compile">
		<!-- ======================= -->
		<!-- Copy across the Headers -->
		<!-- ======================= -->
		<mkdir dir="${sandbox.dir}/include/ieee1516e"/>
		<copy todir="${sandbox.dir}/include/ieee1516e">
			<fileset dir="${ieee1516e.include.dir}" includes="**/*"/>
		</copy>

		<!-- ========================= -->
		<!-- Copy across the libraries -->
		<!-- ========================= -->
		<!-- Copy across the C++ libraries -->
		<mkdir dir="${sandbox.lib.dir}"/>
		<copy todir="${sandbox.lib.dir}">
			<fileset dir="${ieee1516e.complete.dir}" includes="**/*.so"/>
		</copy>

		<chmod dir="${sandbox.lib.dir}/gcc11" perm="755" includes="**/*.so"/>

		<!-- ================================= -->
		<!-- Copy across the example federates -->
		<!-- ================================= -->
		<mkdir dir="${sandbox.examples.dir}/cpp/ieee1516e"/>
		<copy todir="${sandbox.examples.dir}/cpp/ieee1516e">
			<fileset dir="${ieee1516e.example.dir}" includes="**/*"/>
		</copy>
		<chmod dir="${sandbox.examples.dir}/cpp/ieee1516e" perm="777" includes="**/*.sh"/>
	</target>

	<!-- ================================================================================= -->
	<!--                                 Installer Targets                                 -->
	<!-- ================================================================================= -->
	<!-- Not required for an interface build -->

	<!-- ================================================================================= -->
	<!--                             Release Generation Targets                            -->
	<!-- ================================================================================= -->
	<!-- Target to kick off the release process -->
	<target name="release" extensionOf="master.release" depends="clean,test,sandbox"/>

	<!-- ================================================================================= -->
	<!--                           IEEE-1516e Helper Macros                                -->
	<!-- ================================================================================= -->
	<!-- ================================================ -->
	<!--               Macro: compile-hla13               -->
	<!-- ================================================ -->
	<!--
		 This macro is a simple wrapper for gcc-ieee1516. It performs two main tasks:
		   1. Checks to see whether the requested compiler/arch/build setting was requested
		      in the cpp.profile and skips the build if it wasn't.
		   2. If it was requested, makes sure that the appropriate version of the compiler
		      is installed. If it isn't, the compile  is skipped, unless this is a strict
			  build, in which case the build will be failed.
	-->
	<macrodef name="compile-ieee1516e">
		<!-- Attributes -->
		<attribute name="compiler" description="compiler version" default="gcc11"/>
		<attribute name="arch"     description="x86 or amd64"/>
		<attribute name="build"    description="release or debug"/>

		<sequential>
			<!-- 1. Check the build profile -->
			<!-- Only run this if it's in the requested build profile -->
			<if><isset property="@{compiler}.@{arch}.@{build}"/>
			<then>
				<echo message="[Compile] (IEEE-1516e) @{compiler}.@{arch}.@{build}"/>
				<gcc-ieee1516e compiler="@{compiler}" arch="@{arch}" build="@{build}"/>
			</then>
			<else>
				<echo message="[Skip] (IEEE-1516e) @{compiler}.@{arch}.@{build} -- not requested"/>
			</else>
			</if>
		</sequential>
	</macrodef>

	<!-- ================================================ -->
	<!--                Macro: gcc-ieee1516               -->
	<!-- ================================================ -->
	<!-- 
	     The various C++ compiling commands have a lot in common. They share the same
		 source and include base, the same preprocessor definitions, very similar library
		 names and similar library dependencies. Despite being *very* similar, each of the
		 builds requires something just a little bit different.
		 
		 This macro hides all the little details and give a target compiler, architecture
		 and build type, generates the appropriate libraries (adusting library names,
		 working directories, preprocessor definitions, compiler args, etc...)
		 
		 The output from running this macro will be the libRTI-NG and libFedTime
		 libraries (names updated approrpiate for debug/release and 32/64-bit)
		 dropped into ${ieee1516e.complete.dir}.
		 
		 NOTE: This macro should always be wrapped in a <compile-ieee1516e> task to ensure it
		       only runs when it needs to.
		 
		 Usage:
			* <gcc-ieee1516 compiler="gcc4" arch="x86" build="debug"/>
			
		 Arguments:
			* compiler: The compiler to use (vc10, vc9 or vc8)
			* arch:     The platform architecture (x86 or amd64)
			* build:    The build type (debug or release)
	-->	 
	<macrodef name="gcc-ieee1516e" description="(IEEE-1516e) Compile the RTI libraries">
		<!-- Attributes -->
		<attribute name="compiler" description="gcc" default="gcc"/>
		<attribute name="arch"     description="x86 or amd64"/>
		<attribute name="build"    description="release or debug"/>

		<sequential>
			<!-- Local properties used in the macro -->
			<local name="_bitness"/>     <!-- appends "64" or "" to end of library name -->
			<local name="_d"/>           <!-- appends "d" or "" to end of library name -->
			<local name="_cargs"/>       <!-- compiler arguments -->
			<local name="_largs"/>       <!-- linker arguments -->
			<local name="_buildsymbol"/> <!-- adds "DEBUG" or "RELEASE" symbol definition -->
			<local name="_jdklib"/>      <!-- path to either 32 or 64-bit JDK libs -->

			<!-- Are we building for 32-bit or 64-bit? -->
			<if><equals arg1="@{arch}" arg2="amd64"/><then>
				<property name="_bitness" value="64"/>
				<property name="_jdklib" value="${jdk.home.linux64}/lib/server"/>
			</then><else>
				<property name="_bitness" value=""/>
				<property name="_jdklib" value="${jdk.home.linux32}/jre/lib/i586/client"/>
			</else></if>

			<!-- Is this a Debug or Release build? -->
			<if><equals arg1="@{build}" arg2="debug"/><then>
				<!-- Debug Build -->
				<property name="_d"           value="d"/>
				<property name="_cargs"       value="-std=c++14 -g -O0 -fPIC -Wall -Wno-deprecated -Wno-write-strings"/>
				<property name="_largs"       value=""/>
				<property name="_buildsymbol" value="DEBUG"/>
			</then><else>
				<!-- Release Build -->
				<property name="_d"           value=""/>
				<property name="_cargs"       value="-std=c++14 -g -O0 -fPIC -Wall -Wno-deprecated -Wno-write-strings"/>
				<property name="_largs"       value=""/>
				<property name="_buildsymbol" value="RELEASE"/>
			</else></if>

			<!-- ========================== -->
			<!-- Do the library compilation -->
			<!-- ========================== -->
			<echo message="(IEEE-1516e) Building librti1516e${_bitness}${_d} (@{compiler}-@{build} @{arch})"/>
			<cpptask outfile="librti1516e${_bitness}${_d}"
			         workdir="${ieee1516e.build.dir}/@{compiler}/@{arch}/@{build}"
					 outdir="${ieee1516e.complete.dir}/@{compiler}"
			         type="shared"
			         arch="@{arch}"
			         compiler="g++"
			         compilerArgs="${_cargs}"
			         linkerArgs="${_largs}"
			         threadCount="auto">
				<fileset dir="${ieee1516e.src.dir}">
					<include name="**/*.cpp"/>
					<exclude name="types/time/LogicalTimeFactoryFactory.cpp"/>
				</fileset>
				<includepath path="${ieee1516e.include.dir}"/>
				<includepath path="${ieee1516e.src.dir}"/>
				<includepath path="${jdk.home.linux64}/include;${jdk.home.linux64}/include/linux"/>
				<define name="BUILDING_RTI"/>
				<define name="RTI_DISABLE_WARNINGS"/>
				<define name="${_buildsymbol}"/> <!-- DEBUG or RELEASE -->
				<define name="PORTICO_VERSION=${build.version}"/>
				<define name="PORTICO_BUILD_NUMBER=${build.number}"/>
				<library path="${_jdklib}" libs="jvm,jsig"/>
			</cpptask>			

			<!-- library: libfedtime -->
			<echo message="(IEEE-1516e) Building libfedtime1516e${_bitness}${_d} (@{compiler}-@{build} @{arch})"/>
			<cpptask outfile="libfedtime1516e${_bitness}${_d}"
			         workdir="${ieee1516e.build.dir}/@{compiler}/@{arch}/@{build}"
					 outdir="${ieee1516e.complete.dir}/@{compiler}"
			         type="shared"
			         arch="@{arch}"
			         compiler="g++"
			         compilerArgs="${_cargs}"
			         linkerArgs="${_largs}"
			         threadCount="auto">
				<fileset dir="${ieee1516e.src.dir}">
					<include name="types/time/LogicalTimeFactoryFactory.cpp"/>
				</fileset>
				<includepath path="${ieee1516e.include.dir}"/>
				<includepath path="${ieee1516e.src.dir}"/>
				<includepath path="${jdk.home.linux64}/include;${jdk.home.linux64}/include/linux"/>
				<define name="BUILDING_FEDTIME"/>
				<define name="RTI_DISABLE_WARNINGS"/>
				<define name="${_buildsymbol}"/> <!-- DEBUG or RELEASE -->
				<define name="PORTICO_VERSION=${build.version}"/>
				<define name="PORTICO_BUILD_NUMBER=${build.number}"/>
				<library path="${_jdklib}" libs="jvm,jsig"/>
				<library path="${ieee1516e.complete.dir}/@{compiler}" libs="rti1516e${_bitness}${_d}"/>
			</cpptask>
		</sequential>
	</macrodef>

</project>

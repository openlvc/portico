<?xml version="1.0"?>
<!--
                  Welcome to the Portico Build System

       The Portico build system is an artefact-driven, modular, Ant
       based system. The base framework is split up over a number of
       different build files (base structure, macros, etc...) and is
       designed to be extended rather than modified. The full system
       is introduced and described in the online documentation:
       
       http://porticoproject.org/index.php?title=Building_Portico
-->
<project name="hla13">

	<!-- ================================================================================= -->
	<!--                                 General Settings                                  -->
	<!-- ================================================================================= -->
	<description>
		Windows C++ build profile for HLA v1.3 Interface
	</description>

	<!-- ==== Basic Properties ==== -->
	<!-- Get a reference to the JDK we want to use, falling back on the given default -->
	<verifyJdk location="${jdk.home.win64}" arch="amd64"/>

	<!-- ==================================== -->
	<!-- ==== HLA13 Interface Properties ==== -->
	<!-- ==================================== -->
	<!-- compiler properties -->
	<property name="compiler.args.debug"       value="/Zi /MDd /Od /EHsc /GR /W0"/>
	<property name="compiler.args.release"     value="/MD /Od /EHsc /GR /W0"/>
	<!-- Sets property to value safe for visual studio build numbers: 1,1,1,1 -->
	<visualStudioBuildNumber property="product.version" value="${build.version}.${build.number}"/>

	<!-- source -->
	<property name="hla13.src.dir"             location="${cpp.src.dir}/hla13/src"/>
	<property name="hla13.include.dir"         location="${cpp.src.dir}/hla13/include/hla13"/>
	<property name="hla13.test.src.dir"        location="${cpp.src.dir}/hla13/test"/>
	<property name="hla13.example.dir"         location="${cpp.src.dir}/hla13/example"/>

	<!-- build -->
	<property name="hla13.build.dir"           location="${build.dir}/cpp/win32/hla13"/>
	<property name="hla13.complete.dir"        location="${hla13.build.dir}/complete"/>

	<!-- test build -->
	<property name="test13.build.dir"          location="${build.dir}/cpp/win32/test13"/>
	<property name="test13.complete.dir"       location="${test13.build.dir}/complete"/>

	<!-- =========================================================== -->
	<!--                     Project Libraries                       -->
	<!-- =========================================================== -->
	<!-- ==== Library Path Definitions ==== -->
	<!-- See profiles/project.libraries.xml -->
	<!-- <property name="cppunit.dir"     location="..."/> -->
	<!-- <property name="cppunit.include" location="..."/> -->
	<!-- <property name="cppunit.lib"     location="..."/> -->

	<!-- ================================================================================= -->
	<!--                                   Clean Targets                                   -->
	<!-- ================================================================================= -->
	<target name="clean" extensionOf="cpp.clean">
		<delete dir="${hla13.build.dir}"/>
		<delete dir="${test13.build.dir}"/>
	</target>

	<!-- ================================================================================= -->
	<!--                                 Compile Targets                                   -->
	<!-- ================================================================================= -->
	<!-- extends on the main cpp compiling extension point declared externally -->
	<extension-point name="compile"
	                 extensionOf="cpp.compile"
					 description="Compile the full HLA v1.3 interface"/>


	<!-- ================================================================= -->
	<!--             Visual Studio 2019 (vc14_2) Compile Targets           -->
	<!-- ================================================================= -->
	<!-- The Visual Studio 2019 related extension points.
	     We have one of these for each supported platform architecture so
		 that we can compile all the targets for each arch as a group.
	-->
	<target name="compile.vc14_2" extensionOf="compile">
		<compile-hla13 compiler="vc14_2" arch="amd64" build="debug"/>
		<compile-hla13 compiler="vc14_2" arch="amd64" build="release"/>
	</target>

	<!-- ================================================================= -->
	<!--             Visual Studio 2017 (vc14_1) Compile Targets           -->
	<!-- ================================================================= -->
	<!-- The Visual Studio 2017 related extension points.
	     We have one of these for each supported platform architecture so
		 that we can compile all the targets for each arch as a group.
	-->
	<target name="compile.vc14_1" extensionOf="compile">
		<compile-hla13 compiler="vc14_1" arch="amd64" build="debug"/>
		<compile-hla13 compiler="vc14_1" arch="amd64" build="release"/>
	</target>

	<!-- ================================================================= -->
	<!--             Visual Studio 2015 (vc14) Compile Targets             -->
	<!-- ================================================================= -->
	<!-- The Visual Studio 2015 related extension points.
	     We have one of these for each supported platform architecture so
		 that we can compile all the targets for each arch as a group.
	-->
	<target name="compile.vc14" extensionOf="compile">
		<compile-hla13 compiler="vc14" arch="amd64" build="debug"/>
		<compile-hla13 compiler="vc14" arch="amd64" build="release"/>
	</target>
	
	<!-- The Visual Studio 2013 related extension points.
	     We have one of these for each supported platform architecture so
		 that we can compile all the targets for each arch as a group.
	-->
	<target name="compile.vc12" extensionOf="compile">
		<compile-hla13 compiler="vc12" arch="x86" build="debug"/>
		<compile-hla13 compiler="vc12" arch="x86" build="release"/>
		<compile-hla13 compiler="vc12" arch="amd64" build="debug"/>
		<compile-hla13 compiler="vc12" arch="amd64" build="release"/>
	</target>
	
	<!-- ================================================================= -->
	<!--             Visual Studio 2010 (vc10) Compile Targets             -->
	<!-- ================================================================= -->
	<!-- The Visual Studio 2010 related extension points.
	     We have one of these for each supported platform architecture so
		 that we can compile all the targets for each arch as a group.
	-->
	<target name="compile.vc10" extensionOf="compile">
		<compile-hla13 compiler="vc10" arch="x86" build="debug"/>
		<compile-hla13 compiler="vc10" arch="x86" build="release"/>
		<compile-hla13 compiler="vc10" arch="amd64" build="debug"/>
		<compile-hla13 compiler="vc10" arch="amd64" build="release"/>
	</target>

	<!-- ==================================== -->
	<!--          HLA 1.3 Test Suite          -->
	<!-- ==================================== -->
	<target name="test.compile" depends="compile.vc10" if="vc10.x86.debug">
		<cpptask compiler="vc10"
		         outfile="test13"
		         workdir="${test13.build.dir}"
		         outdir="${test13.complete.dir}"
		         type="executable"
			     arch="x86"
		         compilerArgs="${compiler.args.debug}"
		         linkerArgs="/DEBUG">
			<fileset dir="${hla13.test.src.dir}" includes="**/*.cpp"/>
			<includepath path="${hla13.include.dir}"/>
			<includepath path="${hla13.src.dir}/hla/time"/>
			<includepath path="${cppunit.include}"/>
			<define name="RTI_USES_STD_FSTREAM"/>
			<define name="DEBUG"/>
			<library path="${hla13.complete.dir}/vc10" libs="RTI-NGd,FedTimed"/>
			<library path="${cppunit.dir}/win32/vc10" libs="cppunitd"/>
		</cpptask>
	</target>

	<!-- ================================================================================= -->
	<!--                                  Testing Targets                                  -->
	<!-- ================================================================================= -->

	<!-- ==================================== -->
	<!--          HLA 1.3 Test Suite          -->
	<!-- ==================================== -->
	<target name="test" extensionOf="cpp.test" depends="java.sandbox,test.compile">
		<!-- 1. copy the testing resources into test dir (RID file etc...) -->
		<copy todir="${test13.complete.dir}">
			<fileset dir="${resources.testdata.dir}/cpptest/hla13" includes="**/*"/>
			<filterset begintoken="[" endtoken="]">
				<filter token="jarfile" value="${sandbox.lib.dir}/portico.jar"/>
			</filterset>
		</copy>
		<echo>Copied testing resources to ${test13.complete.dir}</echo>

		<!-- 2. run the actual test application -->
		<exec dir="${test13.complete.dir}"
		      executable="${test13.complete.dir}\test13.exe"
		      failonerror="false"
		      failifexecutionfails="false"
		      resultproperty="test13.result">
			<arg value="${test13.complete.dir}\test-results.xml"/>
			<env key="RTI_HOME" path="."/><!-- required, but we set the env up properly anyway -->
			<env key="PATH" path="${hla13.complete.dir}\vc10;${jdk.home.win32}\jre\bin\client"/>
			<env key="PORTICO_DEBUG" value="OFF"/>
			<env key="CLASSPATH" path="${sandbox.lib.dir}\portico.jar"/>
			<env key="PORTICO_JNICHECK" value="true"/>
			<env key="TEST.GROUP" value="${test.group}"/>
		</exec>

		<!-- 3. Generate the report. This will fail the build if any of the tests failed -->
		<echo>Generating the Unit Test Report</echo>
		<cppunit-report result="${test13.result}"
		                xmlfile="${test13.complete.dir}/test-results.xml"
		                xslfile="${test13.complete.dir}/xsl/results.xsl"
		                outfile="${test13.complete.dir}/test-results.html"/>
	</target>

	<!-- ================================================================================= -->
	<!--                                  Sandbox Targets                                  -->
	<!-- ================================================================================= -->
	<!-- 
	     The main sandbox preparation target. This will aggregate together all the various
	     required artefacts scattered around the build environment into the structure that
	     should be present when installed on a users system (relative to the sandbox dir).
	-->
	<target name="sandbox" extensionOf="cpp.sandbox" depends="java.sandbox,compile">
		<!-- ======================= -->
		<!-- Copy across the Headers -->
		<!-- ======================= -->
		<mkdir dir="${sandbox.dir}/include/hla13"/>
		<copy todir="${sandbox.dir}/include/hla13">
			<fileset dir="${hla13.include.dir}" includes="**/*"/>
		</copy>

		<!-- ========================= -->
		<!-- Copy across the libraries -->
		<!-- ========================= -->
		<!-- Copy across the C++ libraries -->
		<mkdir dir="${sandbox.lib.dir}"/>
		<copy todir="${sandbox.lib.dir}">
			<fileset dir="${hla13.complete.dir}" includes="**/*.lib,**/*.exp,**/*.pdb"/>
		</copy>
		<!-- Copy across the C++ dlls -->
		<mkdir dir="${sandbox.bin.dir}"/>
		<copy todir="${sandbox.bin.dir}">
			<fileset dir="${hla13.complete.dir}" includes="**/*.dll"/>
		</copy>

		<!-- ================================= -->
		<!-- Copy across the example federates -->
		<!-- ================================= -->
		<mkdir dir="${sandbox.examples.dir}/cpp/hla13"/>
		<copy todir="${sandbox.examples.dir}/cpp/hla13">
			<fileset dir="${hla13.example.dir}" includes="**/*"/>
		</copy>
	</target>

	<!-- ================================================================================= -->
	<!--                                 Installer Targets                                 -->
	<!-- ================================================================================= -->
	<!-- Not required for an interface build -->

	<!-- ================================================================================= -->
	<!--                             Release Generation Targets                            -->
	<!-- ================================================================================= -->
	<!-- 
	     The parent release target. This will run a clean and then compile all code, run all
	     tests, generate a sandbox and place all additional release artefacts in with it as
		 preparation for release.
	-->
	<target name="release"
	        extensionOf="master.release"
	        depends="clean,test,sandbox"/>

	<!-- ================================================================================= -->
	<!--                            HLA v1.3 Helper Macros                                 -->
	<!-- ================================================================================= -->
	<!-- ================================================ -->
	<!--               Macro: compile-hla13               -->
	<!-- ================================================ -->
	<!--
		 This macro is a simple wrapper for msvc-hla13. It performs two main tasks:
		   1. Checks to see whether the requested compiler/arch/build setting was requested
		      in the cpp.profile and skips the build if it wasn't
		   2. If it was requested, makes sure that the appropriate version of Visual Studio
		      is installed. If it isn't, the compile  is skipped, unless this is a strict
			  build, in which case the build will be failed
	-->
	<macrodef name="compile-hla13">
		<!-- Attributes -->
		<attribute name="compiler" description="vc14_2, vc14_1, vc14, vc12, vc10"/>
		<attribute name="arch"     description="x86 or amd64"/>
		<attribute name="build"    description="release or debug"/>

		<sequential>
			<!-- ========================== -->
			<!-- 1. Check the build profile -->
			<!-- ========================== -->
			<!-- Only run this if it's in the requested build profile -->
			<if><isset property="@{compiler}.@{arch}.@{build}"/>
			<then>
				<!-- ========================== -->
				<!-- 2. Check for Visual Studio -->
				<!-- ========================== -->
				<!-- Make sure the requested version of Visual Studio is present on the system -->
				<if><isVisualStudioPresent version="@{compiler}"/>
					<then>
						<echo message="[Compile] (HLA v1.3) @{compiler}.@{arch}.@{build}"/>
						<msvc-hla13 compiler="@{compiler}" arch="@{arch}" build="@{build}"/>
					</then>
				<elseif><istrue value="${cpp.strict}"/>
					<then>
						<!-- Visual Studio NOT installed - strict build, fail out -->
						<fail message="[Error] (HLA v1.3) @{compiler}.@{arch}.@{build}: @{compiler} is not installed"/>
					</then>
				</elseif>
				<else>
					<!-- This is not a strict build, just skip this compile -->
					<echo message="[Skip] (HLA v1.3) @{compiler}.@{arch}.@{build} -- @{compiler} is not installed"/>
				</else>
				</if>
			
			</then>
			<else>
				<echo message="[Skip] (HLA v1.3) @{compiler}.@{arch}.@{build} -- not requested"/>
			</else>
			</if>
		</sequential>
	</macrodef>

	<!-- ================================================ -->
	<!--                Macro: msvc-hla13                 -->
	<!-- ================================================ -->
	<!-- 
	     The various C++ compiling commands have a lot in common. They share the same
		 source and include base, the same preprocessor definitions, very similar library
		 names and similar library dependencies. Despite being *very* similar, each of the
		 builds requires something just a little bit different.
		 
		 This macro hides all the little details and give a target compiler, architecture
		 and build type, generates the appropriate libraries (adusting library names,
		 working directories, preprocessor definitions, compiler args, etc...)
		 
		 The output from running this macro will be the libRTI-NG and libFedTime
		 libraries (names updated approrpiate for debug/release and 32/64-bit)
		 dropped into ${hla13.complete.dir}.
		 
		 NOTE: This macro should always be wrapped in a <compile-hl13> task to ensure it
		       only runs when it needs to.
		 
		 Usage:
			* <msvc-hla13 compiler="vc10" arch="x86" build="debug"/>
			
		 Arguments:
			* compiler: The compiler to use (vc10, vc9 or vc8)
			* arch:     The platform architecture (x86 or amd64)
			* build:    The build type (debug or release)
	-->	 
	<macrodef name="msvc-hla13" description="(HLA 1.3) Compile the RTI libraries">
		<!-- Attributes -->
		<attribute name="compiler" description="vc14_2, vc14_1, vc14, vc12, vc10"/>
		<attribute name="arch"     description="x86 or amd64"/>
		<attribute name="build"    description="release or debug"/>

		<sequential>
			<!-- Local properties used in the macro -->
			<local name="_bitness"/>     <!-- appends "64" or "" to end of library name -->
			<local name="_d"/>           <!-- appends "d" or "" to end of library name -->
			<local name="_cargs"/>       <!-- compiler arguments -->
			<local name="_largs"/>       <!-- linker arguments -->
			<local name="_buildsymbol"/> <!-- adds "DEBUG" or "RELEASE" symbol definition -->
			<local name="_jdkhome"/>     <!-- path to either 32 or 64-bit JDK -->

			<!-- Are we building for 32-bit or 64-bit? -->
			<if><equals arg1="@{arch}" arg2="amd64"/><then>
				<property name="_bitness" value="_64"/>
				<property name="_jdkhome" value="${jdk.home.win64}"/>
			</then><else>
				<property name="_bitness" value=""/>
				<property name="_jdkhome" value="${jdk.home.win32}"/>
			</else></if>

			<!-- Is this a Debug or Release build? -->
			<if><equals arg1="@{build}" arg2="debug"/><then>
				<!-- Debug Build -->
				<property name="_d"           value="d"/>
				<property name="_cargs"       value="${compiler.args.debug}"/>
				<property name="_largs"       value="/DEBUG"/>
				<property name="_buildsymbol" value="DEBUG"/>
			</then><else>
				<!-- Release Build -->
				<property name="_d"           value=""/>
				<property name="_cargs"       value="${compiler.args.release}"/>
				<property name="_largs"       value=""/>
				<property name="_buildsymbol" value="RELEASE"/>
			</else></if>

			<!-- ========================== -->
			<!-- Do the library compilation -->
			<!-- ========================== -->
			<!-- library: libFedTime -->
			<echo message="(HLA v1.3) Building libFedTime${_bitness}${_d} (@{compiler}-@{build} @{arch})"/>
			<cpptask outfile="libFedTime${_bitness}${_d}"
					 workdir="${hla13.build.dir}/@{compiler}/@{arch}/@{build}"
					 outdir="${hla13.complete.dir}/@{compiler}"
					 type="shared"
					 arch="@{arch}"
					 compiler="@{compiler}"
					 compilerArgs="${_cargs}"
					 linkerArgs="${_largs}"
					 threadCount="auto">
				<fileset dir="${hla13.src.dir}">
					<include name="**/*.rc"/>
					<include name="time/RTIfedTime.cpp"/>
					<include name="time/FedTime.cpp"/>
					<include name="time/FedTimeFactory.cpp"/>
					<include name="types/Exception.cpp"/>
				</fileset>
				<includepath path="${hla13.include.dir}"/>
				<includepath path="${hla13.src.dir}"/>
				<includepath path="${jdk.home.win32}/include;${jdk.home.win32}/include/win32"/>
				<define name="RTI_USES_STD_FSTREAM"/>
				<define name="BUILDING_RTI"/>
				<define name="BUILDING_FEDTIME"/>
				<define name="${_buildsymbol}"/> <!-- DEBUG or RELEASE -->
				<define name="PORTICO_VERSION=${build.version}"/>
				<define name="PORTICO_BUILD_NUMBER=${build.number}"/>
				<define name="PRODUCT_VERSION=${product.version}"/>       <!-- for DLL -->
				<define name="PRODUCT_INTERNAL_NAME=libFedTime${_bitness}${_d}"/>  <!-- for DLL -->
				<library path="${_jdkhome}/lib" libs="jvm"/>
			</cpptask>

			<echo message="(HLA v1.3) Building libRTI-NG${_bitness}${_d} (@{compiler}-@{build} @{arch})"/>
			<cpptask outfile="libRTI-NG${_bitness}${_d}"
					 workdir="${hla13.build.dir}/@{compiler}/@{arch}/@{build}"
					 outdir="${hla13.complete.dir}/@{compiler}"
					 type="shared"
					 arch="@{arch}"
					 compiler="@{compiler}"
					 compilerArgs="${_cargs}"
					 linkerArgs="${_largs}"
					 threadCount="auto">
				<fileset dir="${hla13.src.dir}">
					<include name="**/*.cpp"/>
					<include name="**/*.rc"/>
					<exclude name="time/RTIfedTime.cpp"/>
					<exclude name="time/FedTime.cpp"/>
					<exclude name="time/FedTimeFactory.cpp"/>
				</fileset>
				<includepath path="${hla13.include.dir}"/>
				<includepath path="${hla13.src.dir}"/>
				<includepath path="${jdk.home.win32}/include;${jdk.home.win32}/include/win32"/>
				<define name="RTI_USES_STD_FSTREAM"/>
				<define name="BUILDING_RTI"/>
				<define name="${_buildsymbol}"/> <!-- DEBUG or RELEASE -->
				<define name="PORTICO_VERSION=${build.version}"/>
				<define name="PORTICO_BUILD_NUMBER=${build.number}"/>
				<define name="PRODUCT_VERSION=${product.version}"/>              <!-- for DLL -->
				<define name="PRODUCT_INTERNAL_NAME=libRTI-NG${_bitness}${_d}"/> <!-- for DLL -->
				<library path="${_jdkhome}/lib" libs="jvm"/>
				<library path="${hla13.complete.dir}/@{compiler}"
						 libs="libFedTime${_bitness}${_d}"/>
			</cpptask>
		</sequential>
	</macrodef>

</project>
